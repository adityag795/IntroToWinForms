<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>