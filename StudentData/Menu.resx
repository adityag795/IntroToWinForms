<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        XQAAAABJRU5ErkJggg==
</value>
  </data>
</root>